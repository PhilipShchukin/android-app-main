const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const posthtml = require('posthtml');
const inlineAssets = require('posthtml-inline-assets');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    srcDir: path.join(__dirname, 'out'),
    distDir: path.join(__dirname, 'dist'),
    verbose: true
};

// –£—Ç–∏–ª–∏—Ç—ã
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);
const mkdir = promisify(fs.mkdir);

async function processNextJsExport() {
    try {
        // 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        await prepareDirectory(config.distDir);

        // 2. –ü–æ–∏—Å–∫ HTML-—Ñ–∞–π–ª–æ–≤
        const htmlFiles = await findHtmlFiles(config.srcDir);
        if (htmlFiles.length === 0) {
            console.error('‚ùå HTML-—Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
            return;
        }

        console.log(`‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML-—Ñ–∞–π–ª–æ–≤`);

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
        for (const file of htmlFiles) {
            await processHtmlFile(file);
        }

        console.log('\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–ø–∫–µ: ${config.distDir}`);

    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', err);
        process.exit(1);
    }
}

async function prepareDirectory(dir) {
    if (fs.existsSync(dir)) {
        fs.rmSync(dir, { recursive: true });
    }
    await mkdir(dir, { recursive: true });
}

async function findHtmlFiles(dir) {
    const items = fs.readdirSync(dir);
    const results = [];

    for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);

        if (stat.isDirectory()) {
            results.push(...await findHtmlFiles(fullPath));
        } else if (item.endsWith('.html')) {
            results.push(fullPath);
        }
    }

    return results;
}

async function processHtmlFile(filePath) {
    try {
        const relativePath = path.relative(config.srcDir, filePath);
        console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${relativePath}`);

        // 1. –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        const html = await readFile(filePath, 'utf8');

        // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å posthtml
        const result = await posthtml()
            .use(inlineAssets({
                root: path.dirname(filePath),
                transforms: {
                    script: true,
                    style: true,
                    img: false
                }
            }))
            .process(html);

        // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const outputPath = path.join(config.distDir, relativePath);
        await mkdir(path.dirname(outputPath), { recursive: true });
        await writeFile(outputPath, result.html);

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${relativePath}`);

    } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${path.basename(filePath)}:`, err.message);
    }
}

// –ó–∞–ø—É—Å–∫
processNextJsExport();